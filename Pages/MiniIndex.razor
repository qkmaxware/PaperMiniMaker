@page "/mini"

<div class="w3-center no-print">
    <nav class="w3-small" style="display: inline-block; border-radius: 0 0 8px 8px; margin-left: auto; margin-right: auto;">
        <button class="w3-button w3-round-large" @onclick=@(() => scaleModal?.Show(true))>
            <img src="assets/scale.svg" style="width: 32px; height: 32px;">
            <p>scale</p>
        </button>
        <button class="w3-button w3-round-large">
            <img src="assets/printer.svg" style="width: 32px; height: 32px;" onclick="window.print()">
            <p>
                print <select @bind="baseSelection" onclick="false" @onclick:stopPropagation><option value="Y">with base</option><option value="N">without base</option></select>
            </p>
        </button>
    </nav>
</div>

<PopupModal @ref=scaleModal Title="Apply Scale" OnSave=applyScale>
    <label>Scale Multiplier</label>
    <input class="w3-input w3-margin-bottom" @bind=scaleMultiplier style="background-color:inherit; color:inherit;">
    <label>Reset Scale</label>
    <p><button class="w3-button" @onclick=resetScale>Reset</button> all mini's scale to 1</p>
</PopupModal>
@code {
    private PopupModal scaleModal;
    private float scaleMultiplier = 1;
    private void applyScale() {
        foreach (var mini in minis) {
            mini.Scale *= scaleMultiplier;
        }
        StateHasChanged();
    }
    private void resetScale() {
        scaleMultiplier = 1;
        foreach (var mini in minis) {
            mini.Scale = 1;
        }
        StateHasChanged();
    }
}

<div class="w3-row no-print">
    @foreach (var mini in minis) {
        <div class="w3-col l2 m4 s12 w3-padding">
            <div class="w3-border w3-round-xlarge">    
                <div class="w3-center w3-padding w3-large">
                    @mini.Name @if(mini.Replicas > 1) { <small> (x@(mini.Replicas))</small> }
                </div>
                <div class="w3-center" style="height: 240px;">
                    <img src="@mini.FrontArt.Url" class="pixelart"/>
                </div>
                <div class="w3-right-align">
                    <button class="w3-button" @onclick=@(() => editMini(mini))>Edit</button>
                    <button class="w3-button" @onclick=@(() => cloneMini(mini))>Clone</button>
                    <button class="w3-button w3-text-red" @onclick=@(() => deleteMini(mini))>Delete</button>
                </div>
            </div>
        </div>
    }
    <div class="w3-col l2 m4 s12 w3-padding">
        <div class="w3-display-container w3-round-xlarge" style="border: 1px dashed white; width:100%; height: 320.8px">
            <div class="w3-button w3-round-xlarge" @onclick=createMini style="display: flex; justify-content: center; align-content: center; flex-direction: column; height: 100%; width: 100%;">
                <p>
                    New<br>+
                </p>
            </div>
            <div class="w3-display-bottommiddle">
                <p class="w3-small">
                    or <button @onclick=@(() => bulk?.Show(true)) @onclick:stopPropagation style="cursor: pointer">bulk add</button> multiple minis
                </p>
            </div>
        </div>
    </div>
</div>
<div class="w3-row print">
    @foreach (var mini in minis.OrderBy((m) => m.Size)) {
        for (var i = 0; i < mini.Replicas; i++) {
            <MiniDrawer Mini=mini WithBase=@printWithBase></MiniDrawer>
        }
    }
    <Instructions></Instructions>
</div>

<div class="w3-center w3-padding no-print" style="position: fixed; bottom: 0; left: 0; right: 0; pointer-events: none;">
    Confused? Read the complete instructions <a href="mini/help" target="_blank" style="pointer-events: auto">here</a>.
</div>

<MiniEditor @ref=editor OnChange=StateHasChanged></MiniEditor>
<DeleteConfirmation @ref=delete></DeleteConfirmation>
<BulkLoader @ref=bulk OnChange=bulkAdd></BulkLoader>

@code {

    private MiniEditor editor;
    private DeleteConfirmation delete;
    private BulkLoader bulk;

    private static string baseSelection = "Y";
    private static bool printWithBase => baseSelection == "Y";

    public static List<Mini> minis = new List<Mini> {};

    private void createMini() {
        var mini = new Mini {
            Name = "New Mini " + (minis.Count + 1),
            Size = MiniSize.Medium,
            FrontArt = new MiniArt {
                Url = string.Empty
            },
            Replicas = 1,
        };
        minis.Add(mini);
        editor?.Edit(mini);
    }

    private void bulkAdd(IEnumerable<Mini> toAdd) {
        minis.AddRange(toAdd);
        StateHasChanged();
    }

    private void editMini(Mini mini) {
        editor?.Edit(mini);
    }

    private void cloneMini(Mini mini) {
        var duplicate = mini.Clone();
        if (duplicate.Name != null)
            duplicate.Name += "(Clone)";
        minis.Add(duplicate);
    }

    private void deleteMini(Mini mini) {
        this.delete.AskForConfirmation(() => { minis.Remove(mini); StateHasChanged(); });
    }

}